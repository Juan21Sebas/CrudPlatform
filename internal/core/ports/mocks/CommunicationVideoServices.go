// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	repository "CrudPlatform/internal/core/domain/repository"

	videos "CrudPlatform/internal/core/domain/repository/model/videos"
)

// CommunicationVideoServices is an autogenerated mock type for the CommunicationVideoServices type
type CommunicationVideoServices struct {
	mock.Mock
}

// CreateVideo provides a mock function with given fields: ctx, request
func (_m *CommunicationVideoServices) CreateVideo(ctx *gin.Context, request *videos.Videos) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateVideo")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.Videos) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.Videos) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *videos.Videos) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVideo provides a mock function with given fields: ctx, request
func (_m *CommunicationVideoServices) DeleteVideo(ctx *gin.Context, request *videos.DeleteVideo) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVideo")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.DeleteVideo) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.DeleteVideo) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *videos.DeleteVideo) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectVideo provides a mock function with given fields: ctx, request
func (_m *CommunicationVideoServices) SelectVideo(ctx *gin.Context, request *videos.GetVideo) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectVideo")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.GetVideo) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.GetVideo) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *videos.GetVideo) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVideo provides a mock function with given fields: ctx, request
func (_m *CommunicationVideoServices) UpdateVideo(ctx *gin.Context, request *videos.UpdateVideo) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideo")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.UpdateVideo) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *videos.UpdateVideo) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *videos.UpdateVideo) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommunicationVideoServices creates a new instance of CommunicationVideoServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommunicationVideoServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommunicationVideoServices {
	mock := &CommunicationVideoServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
