// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	schemausers "CrudPlatform/internal/core/domain/repository/schema/users"

	users "CrudPlatform/internal/core/domain/repository/model/users"
)

// DBRepository is an autogenerated mock type for the DBRepository type
type DBRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, request
func (_m *DBRepository) CreateUser(ctx *gin.Context, request *users.User) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.User) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.User) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *users.User) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, request
func (_m *DBRepository) DeleteUser(ctx *gin.Context, request *users.DeleteUser) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.DeleteUser) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectUser provides a mock function with given fields: ctx, request
func (_m *DBRepository) SelectUser(ctx *gin.Context, request *users.GetUser) (*schemausers.UsersGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectUser")
	}

	var r0 *schemausers.UsersGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.GetUser) (*schemausers.UsersGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.GetUser) *schemausers.UsersGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemausers.UsersGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *users.GetUser) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, request
func (_m *DBRepository) UpdateUser(ctx *gin.Context, request *users.UpdateUser) (*schemausers.UsersUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *schemausers.UsersUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.UpdateUser) (*schemausers.UsersUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *users.UpdateUser) *schemausers.UsersUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemausers.UsersUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *users.UpdateUser) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBRepository creates a new instance of DBRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepository {
	mock := &DBRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
