// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	challenges "CrudPlatform/internal/core/domain/repository/model/challenges"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	schemachallenges "CrudPlatform/internal/core/domain/repository/schema/challenges"
)

// DBRepositoryChallenge is an autogenerated mock type for the DBRepositoryChallenge type
type DBRepositoryChallenge struct {
	mock.Mock
}

// CreateChallenge provides a mock function with given fields: ctx, request
func (_m *DBRepositoryChallenge) CreateChallenge(ctx *gin.Context, request *challenges.Challenge) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateChallenge")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.Challenge) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.Challenge) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *challenges.Challenge) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChallenge provides a mock function with given fields: ctx, request
func (_m *DBRepositoryChallenge) DeleteChallenge(ctx *gin.Context, request *challenges.DeleteChallenge) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChallenge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.DeleteChallenge) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectChallenge provides a mock function with given fields: ctx, request
func (_m *DBRepositoryChallenge) SelectChallenge(ctx *gin.Context, request *challenges.GetChallenge) (*schemachallenges.ChallengeGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectChallenge")
	}

	var r0 *schemachallenges.ChallengeGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.GetChallenge) (*schemachallenges.ChallengeGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.GetChallenge) *schemachallenges.ChallengeGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemachallenges.ChallengeGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *challenges.GetChallenge) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChallenge provides a mock function with given fields: ctx, request
func (_m *DBRepositoryChallenge) UpdateChallenge(ctx *gin.Context, request *challenges.UpdateChallenge) (*schemachallenges.ChallengeUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChallenge")
	}

	var r0 *schemachallenges.ChallengeUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.UpdateChallenge) (*schemachallenges.ChallengeUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *challenges.UpdateChallenge) *schemachallenges.ChallengeUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemachallenges.ChallengeUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *challenges.UpdateChallenge) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBRepositoryChallenge creates a new instance of DBRepositoryChallenge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepositoryChallenge(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepositoryChallenge {
	mock := &DBRepositoryChallenge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
